#include "mainwindow.h"
#include <QApplication>
#include <iostream>
#include <stdlib.h>
#include <windows.h>
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include "opencv2/objdetect/objdetect.hpp"
#include <opencv2/imgproc/imgproc.hpp>
#include "videoprocessor.h"


using namespace cv;
using namespace std;

String face_cascade_name = "haarcascade_frontalface_alt.xml";
String eyes_cascade_name = "haarcascade_eye_tree_eyeglasses.xml";
CascadeClassifier face_cascade;
CascadeClassifier eyes_cascade;

void detectEyeAndFace( Mat oneFrame )
{
    std::vector<Rect> faces;  //脸部标注框
    Mat grayFrame;

    cvtColor( oneFrame, grayFrame, CV_BGR2GRAY );
    equalizeHist( grayFrame, grayFrame );

    face_cascade.detectMultiScale( grayFrame, faces, 1.1, 2, 0|CV_HAAR_SCALE_IMAGE, Size(30, 30) );

    for( size_t i = 0; i < faces.size(); i++ )
    {
        Point center( int(faces[i].x + faces[i].width*0.5), int(faces[i].y + faces[i].height*0.5) );
        ellipse( oneFrame, center, Size( int(faces[i].width*0.5), int(faces[i].height*0.5)), 0, 0, 360, Scalar( 255, 0, 255 ), 2, 8, 0 );

        Mat faceROI = grayFrame( faces[i] );  //得到当前标注的脸部区域
        std::vector<Rect> eyes;//眼睛标注


        eyes_cascade.detectMultiScale( faceROI, eyes, 1.1, 2, 0 |CV_HAAR_SCALE_IMAGE, Size(30, 30) );

        for( size_t j = 0; j < eyes.size(); j++ )
        {
            Point center( int(faces[i].x + eyes[j].x + eyes[j].width*0.5), int(faces[i].y + eyes[j].y + eyes[j].height*0.5) );
            int radius = cvRound( (eyes[j].width + eyes[i].height)*0.25 );
            circle( oneFrame, center, radius, Scalar( 255, 0, 0 ), 3, 8, 0 );
        }
    }

    imshow( "EyeNFaceDetect", oneFrame );
}

int main(int argc, char *argv[])
{
       //From Camera
       VideoCapture capture(0);

       //From LoaclAdd
       //VideoCapture capture("E:\\ProgramProjects\\SRTP\\FaceVideo2.wmv");
       if(!capture.isOpened())
       {
           cout<<"Open Video Failed."<<endl;
           return -1;
       }

       if(!face_cascade.load( face_cascade_name ))
       {
           cout<<"Unable to load face_cascade_name"<<endl;
           return -1;
       }

       if(!eyes_cascade.load( eyes_cascade_name ))
       {
           cout<<"Unable to load eye_cascade_name"<<endl;
           return -1;
       }


       bool stop(false);
       char key;
       char filename[256] = "Pic_0.jpg";
       int cont = 1;
       while (!stop)
       {
           Mat frame;
           //capture >> frame;
           if(!capture.read(frame))
               break;
           detectEyeAndFace(frame);
           //imshow("VideoCapture", frame);
           key = waitKey(30);

           //ESC
           if(key == 27)
           {
               cout<<"Now Exit.."<<endl;
               break;
           }

           //Space
           if(key == 32)
           {
                sprintf(filename,"E:\\ProgramProjects\\SRTP\\SavedMedia\\Pic_%d.jpg",cont++);
                imwrite(filename,frame);
                imshow(filename,frame);
                cout<<"Picture Captured!"<<endl;
           }

       }
       return 0;
}
